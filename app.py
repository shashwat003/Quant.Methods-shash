import os
import streamlit as st
import pandas as pd
import plotly.express as px
from io import StringIO

# -------------------- Azure OpenAI (deployment name hardcoded) --------------------
# Fill these in EITHER by editing the strings below OR by setting Streamlit Secrets or env vars.
# Safer (recommended): leave the strings "", and set them in Streamlit "Secrets" instead.
AZURE_OPENAI_ENDPOINT    =  "https://testaisentiment.openai.azure.com/"
AZURE_OPENAI_API_KEY     =  "cb1c33772b3c4edab77db69ae18c9a43"
AZURE_OPENAI_API_VERSION =  "2024-02-15-preview"

# ðŸ‘‡ this is the *deployment name* you see under Azure â†’ OpenAI â†’ Deployments
DEPLOYMENT_NAME = "aipocexploration"  # change if your deployment has a different name

# Create client (OpenAI SDK with Azure)
OPENAI_OK = True
try:
    from openai import AzureOpenAI
    aoai = AzureOpenAI(
        azure_endpoint=AZURE_OPENAI_ENDPOINT,
        api_key=AZURE_OPENAI_API_KEY,
        api_version=AZURE_OPENAI_API_VERSION
    )
except Exception as e:
    OPENAI_OK = False
    aoai = None

def ask_gpt(messages, temperature=0.2, max_tokens=300):
    if not OPENAI_OK:
        return "(Azure OpenAI not configured â€” check endpoint/key/version or deployment name.)"
    try:
        resp = aoai.chat.completions.create(
            model=DEPLOYMENT_NAME,  # call your Azure deployment name
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        return resp.choices[0].message.content
    except Exception as e:
        return f"(Tutor error: {e})"

# ------------------------------ Streamlit UI ---------------------------------
st.set_page_config(page_title="Simple AOAI + Streamlit", page_icon="ðŸ¤–", layout="wide")
st.title("ðŸ¤– Simple Azure OpenAI + Streamlit")
st.caption("Drop-in demo: news ticker, chat tutor, and a tiny expense tracker â€” like your earlier script, but cleaner.")

tabs = st.tabs(["ðŸ“° News Ticker", "ðŸ’¬ GPT Tutor", "ðŸ’¸ Expense Tracker"])

# ------------------------------ News Ticker ----------------------------------
with tabs[0]:
    st.subheader("News Ticker (generated by your Azure deployment)")
    if st.button("Generate headlines"):
        prompt = "Give me 5 short, current-sounding finance/tech headlines. No dates, no sources, just bullet points."
        txt = ask_gpt([
            {"role": "system", "content": "You write concise, punchy headlines."},
            {"role": "user", "content": prompt},
        ], max_tokens=180)
        st.markdown(
            f"""
            <div style='background:#0a5; color:white; padding:10px; border-radius:8px;'>
                <marquee behavior="scroll" direction="left" scrollamount="6">{txt}</marquee>
            </div>
            """,
            unsafe_allow_html=True
        )
    st.info("If nothing appears, your endpoint/key/version or deployment name is wrong.")

# -------------------------------- GPT Tutor ----------------------------------
with tabs[1]:
    st.subheader("GPT Tutor")
    st.write("Ask anything (TVM, annuities, regression, matricesâ€¦).")
    if "chat" not in st.session_state:
        st.session_state.chat = [
            {"role": "system", "content": "You are a friendly quant tutor. Use tiny numeric examples, explain steps clearly."}
        ]
    # show history
    for m in st.session_state.chat[1:]:
        st.chat_message("assistant" if m["role"]=="assistant" else "user").write(m["content"])

    prompt = st.chat_input("Type your questionâ€¦")
    if prompt:
        st.session_state.chat.append({"role":"user","content":prompt})
        reply = ask_gpt(st.session_state.chat)
        st.session_state.chat.append({"role":"assistant","content":reply})
        st.chat_message("assistant").write(reply)

    with st.expander("Azure connection status"):
        def mask(s): 
            return s[:4]+"â€¦"+s[-4:] if isinstance(s, str) and len(s)>8 else s
        st.write({
            "endpoint_set": bool(AZURE_OPENAI_ENDPOINT and "openai.azure.com" in AZURE_OPENAI_ENDPOINT),
            "api_key_set": bool(AZURE_OPENAI_API_KEY and AZURE_OPENAI_API_KEY != "YOUR-AZURE-OPENAI-KEY"),
            "api_version": AZURE_OPENAI_API_VERSION,
            "deployment_name": DEPLOYMENT_NAME,
            "endpoint_sample": mask(AZURE_OPENAI_ENDPOINT),
            "key_sample": mask(AZURE_OPENAI_API_KEY),
        })

# ---------------------------- Expense Tracker --------------------------------
with tabs[2]:
    st.subheader("Tiny Expense Tracker (CSV)")
    st.caption("Adds rows to a local CSV in the app folder (Streamlit Cloud: ephemeral).")

    CSV_PATH = "expenses.csv"
    if "expenses_df" not in st.session_state:
        if os.path.exists(CSV_PATH):
            st.session_state.expenses_df = pd.read_csv(CSV_PATH)
        else:
            st.session_state.expenses_df = pd.DataFrame(columns=["date","category","amount","description"])

    with st.form("add"):
        c1, c2, c3 = st.columns([1,1,1])
        date = c1.text_input("Date (YYYY-MM-DD)")
        category = c2.selectbox("Category", ["Food","Travel","Entertainment","Other"])
        amount = c3.number_input("Amount", min_value=0.0, step=0.01)
        desc = st.text_input("Description")
        ok = st.form_submit_button("âž• Add")
        if ok:
            if date and desc:
                row = {"date":date, "category":category, "amount":amount, "description":desc}
                st.session_state.expenses_df = pd.concat([st.session_state.expenses_df, pd.DataFrame([row])], ignore_index=True)
                st.session_state.expenses_df.to_csv(CSV_PATH, index=False)
                st.success("Added.")
            else:
                st.error("Please fill date and description.")

    df = st.session_state.expenses_df
    if len(df):
        st.dataframe(df, use_container_width=True)
        st.metric("Total", f"${df['amount'].astype(float).sum():,.2f}")
        try:
            fig = px.pie(df, names="category", values="amount", title="Spending by Category")
            st.plotly_chart(fig, use_container_width=True)
        except Exception:
            pass
    else:
        st.info("No rows yet.")
